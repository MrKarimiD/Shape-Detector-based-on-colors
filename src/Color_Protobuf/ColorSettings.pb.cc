// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ColorSettings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ColorSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColorSettings_color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColorSettings_color_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ColorSettings_2eproto() {
  protobuf_AddDesc_ColorSettings_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ColorSettings.proto");
  GOOGLE_CHECK(file != NULL);
  ColorSettings_descriptor_ = file->message_type(0);
  static const int ColorSettings_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_white_balance_blue_u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_white_balance_red_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_brightness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_sharpness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_gain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, input_contrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, red_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, blue_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, green_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, yellow_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, violet_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, cyan_instances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, black_instances_),
  };
  ColorSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorSettings_descriptor_,
      ColorSettings::default_instance_,
      ColorSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorSettings));
  ColorSettings_color_descriptor_ = ColorSettings_descriptor_->nested_type(0);
  static const int ColorSettings_color_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, min_hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, min_sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, min_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, max_hue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, max_sat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, max_val_),
  };
  ColorSettings_color_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColorSettings_color_descriptor_,
      ColorSettings_color::default_instance_,
      ColorSettings_color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColorSettings_color, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColorSettings_color));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ColorSettings_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorSettings_descriptor_, &ColorSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColorSettings_color_descriptor_, &ColorSettings_color::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ColorSettings_2eproto() {
  delete ColorSettings::default_instance_;
  delete ColorSettings_reflection_;
  delete ColorSettings_color::default_instance_;
  delete ColorSettings_color_reflection_;
}

void protobuf_AddDesc_ColorSettings_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ColorSettings.proto\"\251\005\n\rColorSettings\022"
    "\"\n\032input_WHITE_BALANCE_BLUE_U\030\001 \002(\003\022!\n\031i"
    "nput_WHITE_BALANCE_RED_V\030\002 \002(\003\022\026\n\016input_"
    "EXPOSURE\030\003 \002(\003\022\030\n\020input_BRIGHTNESS\030\004 \002(\003"
    "\022\027\n\017input_SHARPNESS\030\005 \002(\005\022\022\n\ninput_GAIN\030"
    "\006 \002(\003\022\021\n\tinput_HUE\030\007 \002(\003\022\021\n\tinput_SAT\030\010 "
    "\002(\003\022\026\n\016input_CONTRAST\030\t \002(\003\022+\n\rred_insta"
    "nces\030\n \003(\0132\024.ColorSettings.color\022,\n\016blue"
    "_instances\030\013 \003(\0132\024.ColorSettings.color\022-"
    "\n\017green_instances\030\014 \003(\0132\024.ColorSettings."
    "color\022.\n\020yellow_instances\030\r \003(\0132\024.ColorS"
    "ettings.color\022.\n\020violet_instances\030\016 \003(\0132"
    "\024.ColorSettings.color\022,\n\016cyan_instances\030"
    "\017 \003(\0132\024.ColorSettings.color\022-\n\017black_ins"
    "tances\030\020 \003(\0132\024.ColorSettings.color\032m\n\005co"
    "lor\022\017\n\007min_hue\030\001 \002(\002\022\017\n\007min_sat\030\002 \002(\002\022\017\n"
    "\007min_val\030\003 \002(\002\022\017\n\007max_hue\030\004 \002(\002\022\017\n\007max_s"
    "at\030\005 \002(\002\022\017\n\007max_val\030\006 \002(\002", 705);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ColorSettings.proto", &protobuf_RegisterTypes);
  ColorSettings::default_instance_ = new ColorSettings();
  ColorSettings_color::default_instance_ = new ColorSettings_color();
  ColorSettings::default_instance_->InitAsDefaultInstance();
  ColorSettings_color::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ColorSettings_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ColorSettings_2eproto {
  StaticDescriptorInitializer_ColorSettings_2eproto() {
    protobuf_AddDesc_ColorSettings_2eproto();
  }
} static_descriptor_initializer_ColorSettings_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ColorSettings_color::kMinHueFieldNumber;
const int ColorSettings_color::kMinSatFieldNumber;
const int ColorSettings_color::kMinValFieldNumber;
const int ColorSettings_color::kMaxHueFieldNumber;
const int ColorSettings_color::kMaxSatFieldNumber;
const int ColorSettings_color::kMaxValFieldNumber;
#endif  // !_MSC_VER

ColorSettings_color::ColorSettings_color()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColorSettings_color::InitAsDefaultInstance() {
}

ColorSettings_color::ColorSettings_color(const ColorSettings_color& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColorSettings_color::SharedCtor() {
  _cached_size_ = 0;
  min_hue_ = 0;
  min_sat_ = 0;
  min_val_ = 0;
  max_hue_ = 0;
  max_sat_ = 0;
  max_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorSettings_color::~ColorSettings_color() {
  SharedDtor();
}

void ColorSettings_color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorSettings_color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorSettings_color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorSettings_color_descriptor_;
}

const ColorSettings_color& ColorSettings_color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ColorSettings_2eproto();  return *default_instance_;
}

ColorSettings_color* ColorSettings_color::default_instance_ = NULL;

ColorSettings_color* ColorSettings_color::New() const {
  return new ColorSettings_color;
}

void ColorSettings_color::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_hue_ = 0;
    min_sat_ = 0;
    min_val_ = 0;
    max_hue_ = 0;
    max_sat_ = 0;
    max_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorSettings_color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float min_hue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_hue_)));
          set_has_min_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_min_sat;
        break;
      }
      
      // required float min_sat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_sat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_sat_)));
          set_has_min_sat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_min_val;
        break;
      }
      
      // required float min_val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_val_)));
          set_has_min_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_max_hue;
        break;
      }
      
      // required float max_hue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_hue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_hue_)));
          set_has_max_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_max_sat;
        break;
      }
      
      // required float max_sat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_sat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_sat_)));
          set_has_max_sat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_max_val;
        break;
      }
      
      // required float max_val = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_val_)));
          set_has_max_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColorSettings_color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float min_hue = 1;
  if (has_min_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_hue(), output);
  }
  
  // required float min_sat = 2;
  if (has_min_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_sat(), output);
  }
  
  // required float min_val = 3;
  if (has_min_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_val(), output);
  }
  
  // required float max_hue = 4;
  if (has_max_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_hue(), output);
  }
  
  // required float max_sat = 5;
  if (has_max_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->max_sat(), output);
  }
  
  // required float max_val = 6;
  if (has_max_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColorSettings_color::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float min_hue = 1;
  if (has_min_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_hue(), target);
  }
  
  // required float min_sat = 2;
  if (has_min_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_sat(), target);
  }
  
  // required float min_val = 3;
  if (has_min_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_val(), target);
  }
  
  // required float max_hue = 4;
  if (has_max_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_hue(), target);
  }
  
  // required float max_sat = 5;
  if (has_max_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->max_sat(), target);
  }
  
  // required float max_val = 6;
  if (has_max_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColorSettings_color::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float min_hue = 1;
    if (has_min_hue()) {
      total_size += 1 + 4;
    }
    
    // required float min_sat = 2;
    if (has_min_sat()) {
      total_size += 1 + 4;
    }
    
    // required float min_val = 3;
    if (has_min_val()) {
      total_size += 1 + 4;
    }
    
    // required float max_hue = 4;
    if (has_max_hue()) {
      total_size += 1 + 4;
    }
    
    // required float max_sat = 5;
    if (has_max_sat()) {
      total_size += 1 + 4;
    }
    
    // required float max_val = 6;
    if (has_max_val()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorSettings_color::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorSettings_color* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorSettings_color*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorSettings_color::MergeFrom(const ColorSettings_color& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_hue()) {
      set_min_hue(from.min_hue());
    }
    if (from.has_min_sat()) {
      set_min_sat(from.min_sat());
    }
    if (from.has_min_val()) {
      set_min_val(from.min_val());
    }
    if (from.has_max_hue()) {
      set_max_hue(from.max_hue());
    }
    if (from.has_max_sat()) {
      set_max_sat(from.max_sat());
    }
    if (from.has_max_val()) {
      set_max_val(from.max_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorSettings_color::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorSettings_color::CopyFrom(const ColorSettings_color& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorSettings_color::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ColorSettings_color::Swap(ColorSettings_color* other) {
  if (other != this) {
    std::swap(min_hue_, other->min_hue_);
    std::swap(min_sat_, other->min_sat_);
    std::swap(min_val_, other->min_val_);
    std::swap(max_hue_, other->max_hue_);
    std::swap(max_sat_, other->max_sat_);
    std::swap(max_val_, other->max_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorSettings_color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorSettings_color_descriptor_;
  metadata.reflection = ColorSettings_color_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ColorSettings::kInputWHITEBALANCEBLUEUFieldNumber;
const int ColorSettings::kInputWHITEBALANCEREDVFieldNumber;
const int ColorSettings::kInputEXPOSUREFieldNumber;
const int ColorSettings::kInputBRIGHTNESSFieldNumber;
const int ColorSettings::kInputSHARPNESSFieldNumber;
const int ColorSettings::kInputGAINFieldNumber;
const int ColorSettings::kInputHUEFieldNumber;
const int ColorSettings::kInputSATFieldNumber;
const int ColorSettings::kInputCONTRASTFieldNumber;
const int ColorSettings::kRedInstancesFieldNumber;
const int ColorSettings::kBlueInstancesFieldNumber;
const int ColorSettings::kGreenInstancesFieldNumber;
const int ColorSettings::kYellowInstancesFieldNumber;
const int ColorSettings::kVioletInstancesFieldNumber;
const int ColorSettings::kCyanInstancesFieldNumber;
const int ColorSettings::kBlackInstancesFieldNumber;
#endif  // !_MSC_VER

ColorSettings::ColorSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColorSettings::InitAsDefaultInstance() {
}

ColorSettings::ColorSettings(const ColorSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColorSettings::SharedCtor() {
  _cached_size_ = 0;
  input_white_balance_blue_u_ = GOOGLE_LONGLONG(0);
  input_white_balance_red_v_ = GOOGLE_LONGLONG(0);
  input_exposure_ = GOOGLE_LONGLONG(0);
  input_brightness_ = GOOGLE_LONGLONG(0);
  input_sharpness_ = 0;
  input_gain_ = GOOGLE_LONGLONG(0);
  input_hue_ = GOOGLE_LONGLONG(0);
  input_sat_ = GOOGLE_LONGLONG(0);
  input_contrast_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColorSettings::~ColorSettings() {
  SharedDtor();
}

void ColorSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColorSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColorSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorSettings_descriptor_;
}

const ColorSettings& ColorSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ColorSettings_2eproto();  return *default_instance_;
}

ColorSettings* ColorSettings::default_instance_ = NULL;

ColorSettings* ColorSettings::New() const {
  return new ColorSettings;
}

void ColorSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    input_white_balance_blue_u_ = GOOGLE_LONGLONG(0);
    input_white_balance_red_v_ = GOOGLE_LONGLONG(0);
    input_exposure_ = GOOGLE_LONGLONG(0);
    input_brightness_ = GOOGLE_LONGLONG(0);
    input_sharpness_ = 0;
    input_gain_ = GOOGLE_LONGLONG(0);
    input_hue_ = GOOGLE_LONGLONG(0);
    input_sat_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    input_contrast_ = GOOGLE_LONGLONG(0);
  }
  red_instances_.Clear();
  blue_instances_.Clear();
  green_instances_.Clear();
  yellow_instances_.Clear();
  violet_instances_.Clear();
  cyan_instances_.Clear();
  black_instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColorSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 input_WHITE_BALANCE_BLUE_U = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_white_balance_blue_u_)));
          set_has_input_white_balance_blue_u();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_input_WHITE_BALANCE_RED_V;
        break;
      }
      
      // required int64 input_WHITE_BALANCE_RED_V = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_WHITE_BALANCE_RED_V:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_white_balance_red_v_)));
          set_has_input_white_balance_red_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_input_EXPOSURE;
        break;
      }
      
      // required int64 input_EXPOSURE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_EXPOSURE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_exposure_)));
          set_has_input_exposure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_input_BRIGHTNESS;
        break;
      }
      
      // required int64 input_BRIGHTNESS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_BRIGHTNESS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_brightness_)));
          set_has_input_brightness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_input_SHARPNESS;
        break;
      }
      
      // required int32 input_SHARPNESS = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_SHARPNESS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_sharpness_)));
          set_has_input_sharpness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_input_GAIN;
        break;
      }
      
      // required int64 input_GAIN = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_GAIN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_gain_)));
          set_has_input_gain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_input_HUE;
        break;
      }
      
      // required int64 input_HUE = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_HUE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_hue_)));
          set_has_input_hue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_input_SAT;
        break;
      }
      
      // required int64 input_SAT = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_SAT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_sat_)));
          set_has_input_sat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_input_CONTRAST;
        break;
      }
      
      // required int64 input_CONTRAST = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_input_CONTRAST:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &input_contrast_)));
          set_has_input_contrast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_red_instances;
        break;
      }
      
      // repeated .ColorSettings.color red_instances = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_red_instances;
        if (input->ExpectTag(90)) goto parse_blue_instances;
        break;
      }
      
      // repeated .ColorSettings.color blue_instances = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_blue_instances;
        if (input->ExpectTag(98)) goto parse_green_instances;
        break;
      }
      
      // repeated .ColorSettings.color green_instances = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_green_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_green_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_green_instances;
        if (input->ExpectTag(106)) goto parse_yellow_instances;
        break;
      }
      
      // repeated .ColorSettings.color yellow_instances = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yellow_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_yellow_instances;
        if (input->ExpectTag(114)) goto parse_violet_instances;
        break;
      }
      
      // repeated .ColorSettings.color violet_instances = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_violet_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_violet_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_violet_instances;
        if (input->ExpectTag(122)) goto parse_cyan_instances;
        break;
      }
      
      // repeated .ColorSettings.color cyan_instances = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cyan_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cyan_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cyan_instances;
        if (input->ExpectTag(130)) goto parse_black_instances;
        break;
      }
      
      // repeated .ColorSettings.color black_instances = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_black_instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_black_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_black_instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColorSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 input_WHITE_BALANCE_BLUE_U = 1;
  if (has_input_white_balance_blue_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->input_white_balance_blue_u(), output);
  }
  
  // required int64 input_WHITE_BALANCE_RED_V = 2;
  if (has_input_white_balance_red_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->input_white_balance_red_v(), output);
  }
  
  // required int64 input_EXPOSURE = 3;
  if (has_input_exposure()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->input_exposure(), output);
  }
  
  // required int64 input_BRIGHTNESS = 4;
  if (has_input_brightness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->input_brightness(), output);
  }
  
  // required int32 input_SHARPNESS = 5;
  if (has_input_sharpness()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->input_sharpness(), output);
  }
  
  // required int64 input_GAIN = 6;
  if (has_input_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->input_gain(), output);
  }
  
  // required int64 input_HUE = 7;
  if (has_input_hue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->input_hue(), output);
  }
  
  // required int64 input_SAT = 8;
  if (has_input_sat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->input_sat(), output);
  }
  
  // required int64 input_CONTRAST = 9;
  if (has_input_contrast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->input_contrast(), output);
  }
  
  // repeated .ColorSettings.color red_instances = 10;
  for (int i = 0; i < this->red_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->red_instances(i), output);
  }
  
  // repeated .ColorSettings.color blue_instances = 11;
  for (int i = 0; i < this->blue_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->blue_instances(i), output);
  }
  
  // repeated .ColorSettings.color green_instances = 12;
  for (int i = 0; i < this->green_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->green_instances(i), output);
  }
  
  // repeated .ColorSettings.color yellow_instances = 13;
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->yellow_instances(i), output);
  }
  
  // repeated .ColorSettings.color violet_instances = 14;
  for (int i = 0; i < this->violet_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->violet_instances(i), output);
  }
  
  // repeated .ColorSettings.color cyan_instances = 15;
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cyan_instances(i), output);
  }
  
  // repeated .ColorSettings.color black_instances = 16;
  for (int i = 0; i < this->black_instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->black_instances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColorSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 input_WHITE_BALANCE_BLUE_U = 1;
  if (has_input_white_balance_blue_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->input_white_balance_blue_u(), target);
  }
  
  // required int64 input_WHITE_BALANCE_RED_V = 2;
  if (has_input_white_balance_red_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->input_white_balance_red_v(), target);
  }
  
  // required int64 input_EXPOSURE = 3;
  if (has_input_exposure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->input_exposure(), target);
  }
  
  // required int64 input_BRIGHTNESS = 4;
  if (has_input_brightness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->input_brightness(), target);
  }
  
  // required int32 input_SHARPNESS = 5;
  if (has_input_sharpness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->input_sharpness(), target);
  }
  
  // required int64 input_GAIN = 6;
  if (has_input_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->input_gain(), target);
  }
  
  // required int64 input_HUE = 7;
  if (has_input_hue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->input_hue(), target);
  }
  
  // required int64 input_SAT = 8;
  if (has_input_sat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->input_sat(), target);
  }
  
  // required int64 input_CONTRAST = 9;
  if (has_input_contrast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->input_contrast(), target);
  }
  
  // repeated .ColorSettings.color red_instances = 10;
  for (int i = 0; i < this->red_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->red_instances(i), target);
  }
  
  // repeated .ColorSettings.color blue_instances = 11;
  for (int i = 0; i < this->blue_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->blue_instances(i), target);
  }
  
  // repeated .ColorSettings.color green_instances = 12;
  for (int i = 0; i < this->green_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->green_instances(i), target);
  }
  
  // repeated .ColorSettings.color yellow_instances = 13;
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->yellow_instances(i), target);
  }
  
  // repeated .ColorSettings.color violet_instances = 14;
  for (int i = 0; i < this->violet_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->violet_instances(i), target);
  }
  
  // repeated .ColorSettings.color cyan_instances = 15;
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cyan_instances(i), target);
  }
  
  // repeated .ColorSettings.color black_instances = 16;
  for (int i = 0; i < this->black_instances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->black_instances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColorSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 input_WHITE_BALANCE_BLUE_U = 1;
    if (has_input_white_balance_blue_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_white_balance_blue_u());
    }
    
    // required int64 input_WHITE_BALANCE_RED_V = 2;
    if (has_input_white_balance_red_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_white_balance_red_v());
    }
    
    // required int64 input_EXPOSURE = 3;
    if (has_input_exposure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_exposure());
    }
    
    // required int64 input_BRIGHTNESS = 4;
    if (has_input_brightness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_brightness());
    }
    
    // required int32 input_SHARPNESS = 5;
    if (has_input_sharpness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input_sharpness());
    }
    
    // required int64 input_GAIN = 6;
    if (has_input_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_gain());
    }
    
    // required int64 input_HUE = 7;
    if (has_input_hue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_hue());
    }
    
    // required int64 input_SAT = 8;
    if (has_input_sat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_sat());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 input_CONTRAST = 9;
    if (has_input_contrast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->input_contrast());
    }
    
  }
  // repeated .ColorSettings.color red_instances = 10;
  total_size += 1 * this->red_instances_size();
  for (int i = 0; i < this->red_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red_instances(i));
  }
  
  // repeated .ColorSettings.color blue_instances = 11;
  total_size += 1 * this->blue_instances_size();
  for (int i = 0; i < this->blue_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_instances(i));
  }
  
  // repeated .ColorSettings.color green_instances = 12;
  total_size += 1 * this->green_instances_size();
  for (int i = 0; i < this->green_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->green_instances(i));
  }
  
  // repeated .ColorSettings.color yellow_instances = 13;
  total_size += 1 * this->yellow_instances_size();
  for (int i = 0; i < this->yellow_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yellow_instances(i));
  }
  
  // repeated .ColorSettings.color violet_instances = 14;
  total_size += 1 * this->violet_instances_size();
  for (int i = 0; i < this->violet_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->violet_instances(i));
  }
  
  // repeated .ColorSettings.color cyan_instances = 15;
  total_size += 1 * this->cyan_instances_size();
  for (int i = 0; i < this->cyan_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cyan_instances(i));
  }
  
  // repeated .ColorSettings.color black_instances = 16;
  total_size += 2 * this->black_instances_size();
  for (int i = 0; i < this->black_instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->black_instances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColorSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColorSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColorSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColorSettings::MergeFrom(const ColorSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_instances_.MergeFrom(from.red_instances_);
  blue_instances_.MergeFrom(from.blue_instances_);
  green_instances_.MergeFrom(from.green_instances_);
  yellow_instances_.MergeFrom(from.yellow_instances_);
  violet_instances_.MergeFrom(from.violet_instances_);
  cyan_instances_.MergeFrom(from.cyan_instances_);
  black_instances_.MergeFrom(from.black_instances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_white_balance_blue_u()) {
      set_input_white_balance_blue_u(from.input_white_balance_blue_u());
    }
    if (from.has_input_white_balance_red_v()) {
      set_input_white_balance_red_v(from.input_white_balance_red_v());
    }
    if (from.has_input_exposure()) {
      set_input_exposure(from.input_exposure());
    }
    if (from.has_input_brightness()) {
      set_input_brightness(from.input_brightness());
    }
    if (from.has_input_sharpness()) {
      set_input_sharpness(from.input_sharpness());
    }
    if (from.has_input_gain()) {
      set_input_gain(from.input_gain());
    }
    if (from.has_input_hue()) {
      set_input_hue(from.input_hue());
    }
    if (from.has_input_sat()) {
      set_input_sat(from.input_sat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_input_contrast()) {
      set_input_contrast(from.input_contrast());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColorSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColorSettings::CopyFrom(const ColorSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  for (int i = 0; i < red_instances_size(); i++) {
    if (!this->red_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blue_instances_size(); i++) {
    if (!this->blue_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < green_instances_size(); i++) {
    if (!this->green_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yellow_instances_size(); i++) {
    if (!this->yellow_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < violet_instances_size(); i++) {
    if (!this->violet_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cyan_instances_size(); i++) {
    if (!this->cyan_instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < black_instances_size(); i++) {
    if (!this->black_instances(i).IsInitialized()) return false;
  }
  return true;
}

void ColorSettings::Swap(ColorSettings* other) {
  if (other != this) {
    std::swap(input_white_balance_blue_u_, other->input_white_balance_blue_u_);
    std::swap(input_white_balance_red_v_, other->input_white_balance_red_v_);
    std::swap(input_exposure_, other->input_exposure_);
    std::swap(input_brightness_, other->input_brightness_);
    std::swap(input_sharpness_, other->input_sharpness_);
    std::swap(input_gain_, other->input_gain_);
    std::swap(input_hue_, other->input_hue_);
    std::swap(input_sat_, other->input_sat_);
    std::swap(input_contrast_, other->input_contrast_);
    red_instances_.Swap(&other->red_instances_);
    blue_instances_.Swap(&other->blue_instances_);
    green_instances_.Swap(&other->green_instances_);
    yellow_instances_.Swap(&other->yellow_instances_);
    violet_instances_.Swap(&other->violet_instances_);
    cyan_instances_.Swap(&other->cyan_instances_);
    black_instances_.Swap(&other->black_instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColorSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColorSettings_descriptor_;
  metadata.reflection = ColorSettings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
